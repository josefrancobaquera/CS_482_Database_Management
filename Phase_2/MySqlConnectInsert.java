package Team2;

// Group Names: Jose Franco Baquera, Michael Daviet, and Kevin Hindman
// Group Number: 2
// CS482: DATABASE MANAGEMENT - FALL 2018
// Project Phase 2 - Due on 11/4/2018 

// Import the required interfaces. 
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import net.proteanit.sql.DbUtils;

public class MySqlConnectInsert extends javax.swing.JFrame {
    
    // Each MySqlConnectInsert object will have the following
    // attributes. 
    private String singleInsertionTableSql = "";
    private File fileToBeInserted;
    private InsertData tempInsertDataJFrame;
    private String tableToBeInserted;
    private String tableAttributes;
    private String pathToFile;
    private Connection sqlConnection;
    private Statement sqlStatement;
    private PreparedStatement sqlStatementSingle;
    private String errorMessage = "Whoops. Error Type: ";

    public MySqlConnectInsert( InsertData tempInsertData, File insertedFile, String fileName ) {
        
        // Inizalize the object's attributes.
        initComponents( );
        fileToBeInserted = insertedFile;
        tempInsertDataJFrame = tempInsertData;
        pathToFile = fileName;
        
        // Determine which table we will insert the data.
        if ( fileName.toLowerCase().contains("players.txt") ) {
           
            tableToBeInserted = " Players ";
            tableAttributes = " (Name, PlayerID, TeamName, Position, Touchdowns, TotalYards, Salary) VALUES (?, ?, ?, ?, ?, ?, ?) ";
           
        } // end if.
        
        else if ( fileName.toLowerCase().contains("games.txt") ) {
            
            tableToBeInserted = " Games ";
            tableAttributes = " (GameID, Date, Stadium, Result, Attendance, TicketRevenue) VALUES (?, ?, ?, ?, ?, ?) ";
            
        } // end else if.
        
        else if ( fileName.toLowerCase().contains("play.txt") ) {
            
            tableToBeInserted = " Play ";
            tableAttributes = " (PlayerID, GameID) VALUES (?, ?) ";
        
        } // end else if.
        
        else {
            
            tableToBeInserted = "ERROR";
            tableAttributes = "ERROR";
            
        } // end else.
        
        // Use a try and catch in order to make sure that a connection can be esablished.
        try { 
            
            // Try to establish a connection.
            Class.forName("com.mysql.cj.jdbc.Driver");
            sqlConnection = DriverManager.getConnection("jdbc:mysql://dbclass.cs.nmsu.edu:3306/cs482502fa18_jbaquera?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC", "jbaquera", "CS482-2018" );
            sqlStatement = sqlConnection.createStatement();
        } // end try.
        
        catch ( Exception e ){
            
            // If the connection could not be established, print out an error message.
            errorMessage = errorMessage + e.getMessage();
            jTextArea1.append(errorMessage + "\n");
            jTextArea1.append("Please go back and recheck your Internet Connection!\n");
            errorMessage = "Whoops. Error Type: ";
          
        } // end catch.
        
    } // end constructor. 

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton4 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(800, 600));
        setResizable(false);

        jPanel1.setMaximumSize(new java.awt.Dimension(800, 600));
        jPanel1.setMinimumSize(new java.awt.Dimension(800, 600));
        jPanel1.setPreferredSize(new java.awt.Dimension(800, 600));

        jPanel2.setBackground(new java.awt.Color(107, 25, 25));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));
        jPanel2.setMaximumSize(new java.awt.Dimension(800, 600));
        jPanel2.setMinimumSize(new java.awt.Dimension(800, 600));
        jPanel2.setPreferredSize(new java.awt.Dimension(800, 600));
        jPanel2.setSize(new java.awt.Dimension(800, 600));

        jButton3.setFont(new java.awt.Font("Lucida Sans Typewriter", 0, 13)); // NOI18N
        jButton3.setText("Single-Insertion (Slower)");
        jButton3.setToolTipText("");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Lucida Sans Typewriter", 0, 13)); // NOI18N
        jButton2.setText("Bulk-Loading (Faster/Safer)");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Sans Typewriter", 0, 13)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("The success or failure will be displayed on the text box below!");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton4.setFont(new java.awt.Font("Lucida Sans Typewriter", 0, 13)); // NOI18N
        jButton4.setText("Go Back");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Lucida Sans Typewriter", 0, 13)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Your file was accepted! Now choose one of the two options on how you want to insert the data!");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(116, 116, 116))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 529, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15))))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(14, 14, 14)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 762, Short.MAX_VALUE)
                    .addGap(16, 16, 16)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(119, 119, 119)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(27, 27, 27)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(504, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // If this button is pressed, then the user wants to buck-load the data.
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        // If the data to be inserted is not "ERROR", continue to add it to the database using a batch statement.
        if ( !tableToBeInserted.equals("ERROR" ) ) {
            
            // Use a try and catch that will add the data using data buckloading.
            try {
                
                // First check if the file inserted is Players type.
                if( tableToBeInserted.equals( " Players " ) ) {
                    
                    // Start the timer.
                    long start = System.currentTimeMillis(); 
                    
                    String tempStringStatement = " LOAD DATA LOCAL INFILE '" + pathToFile +
                            "' INTO TABLE Players FIELDS TERMINATED BY \',\' LINES TERMINATED BY \'\\n\'";

                    // Execute the statement.
                    sqlStatement.executeUpdate(tempStringStatement);
                    
                    // Calculate the amount of time it took to upload the data.
                    long finish = System.currentTimeMillis();
                    long timeToExecute = finish - start;
                    
                    // Print the time it took to execute the query.
                    jTextArea1.append( "SUCCESS!! The time it took to insert the data was: " + timeToExecute + " milliseconds (or equally; " + ((float)timeToExecute /1000) + " seconds, " + ((float)timeToExecute /60000) + " minutes).\n");
    
                } // end if.
                
                // Now check if the file inserted is Games type.
                else if ( tableToBeInserted.equals( " Games " ) ) {
                    
                     // Start the timer.
                    long start = System.currentTimeMillis(); 
                    
                    String tempStringStatement = " LOAD DATA LOCAL INFILE '" + pathToFile +
                            "' INTO TABLE Games FIELDS TERMINATED BY \',\' LINES TERMINATED BY \'\\n\'";

                    // Execute the statement.
                    sqlStatement.executeUpdate(tempStringStatement);
                    
                    // Calculate the amount of time it took to uplaod the data.
                    long finish = System.currentTimeMillis();
                    long timeToExecute = finish - start;
                    
                    // Print the time it took to execute the query.
                    jTextArea1.append( "SUCCESS!! The time it took to insert the data was: " + timeToExecute + " milliseconds (or equally; " + ((float)timeToExecute /1000) + " seconds, " + ((float)timeToExecute /60000) + " minutes).\n");
    
                } // end else if.
                
                // Now check if the file inserted is Play type.
                else if ( tableToBeInserted.equals(" Play ") ) {
                    
                    // Start the timer.
                    long start = System.currentTimeMillis(); 
                    
                    String tempStringStatement = " LOAD DATA LOCAL INFILE '" + pathToFile +
                            "' INTO TABLE Play FIELDS TERMINATED BY \',\' LINES TERMINATED BY \'\\n\'";

                    // Execute the statement.
                    sqlStatement.executeUpdate(tempStringStatement);
                    
                    // Calculate the amount of time it took to uplaod the data.
                    long finish = System.currentTimeMillis();
                    long timeToExecute = finish - start;
                    
                    // Print the time it took to execute the query.
                    jTextArea1.append( "SUCCESS!! The time it took to insert the data was: " + timeToExecute + " milliseconds (or equally; " + ((float)timeToExecute /1000) + " seconds, " + ((float)timeToExecute /60000) + " minutes).\n");
                    
                } // end else if.
            
            } // end try.
            
            catch (Exception e ) {
                
                // If the batch insertion failed, display an error message to the user. 
                errorMessage = errorMessage + e.getMessage();
                jTextArea1.append(errorMessage + "\n");
                jTextArea1.append("Please go back and recheck your inputted File!\n");
                errorMessage = "Whoops. Error Type: ";
                
            } // end catch.
        
        } // end if.
        
    }//GEN-LAST:event_jButton2ActionPerformed

    // If this button is pressed, then the user wants to insert the data as a single insertion
    // for every line of data.
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        // If the data to be inserted is not "ERROR", continue to add it to the database using a "single insertion" methodology.
        if ( !tableToBeInserted.equals("ERROR" ) ) {
            
            try {
                
                // Prepare the sqlstatement and connection.
                singleInsertionTableSql  = "INSERT INTO " + tableToBeInserted + "" + tableAttributes;
                sqlStatementSingle = sqlConnection.prepareStatement(singleInsertionTableSql);
                sqlConnection.setAutoCommit(true);
                
                // Now we have to read in the file choosen by the user and add each line to the batch.
                
                // First check if the file inserted is Players type.
                if( tableToBeInserted.equals( " Players " ) ) {
                    
                    // Read-in the file. 
                    BufferedReader br = new BufferedReader(new FileReader(fileToBeInserted));
                    
                    // Set up temporary variables needed.
                    String tempLine = "";
                    String firstAttribute = "";
                    int secondAttribute = -1;
                    String thirdAttribute = "";
                    String fourthAttribute = "";
                    int fifthAttribute = -1;
                    int sixthAttribute = -1;
                    int seventhAttribute = -1;
                    
                    // Start the timer.
                    long start = System.currentTimeMillis(); 

                    // Read in each line and add it to the databse one at a time. Do this until the end of the file.
                    while ( (tempLine = br.readLine()) != null ) {
                        
                        firstAttribute = tempLine.split(",\\s*")[0];
                        secondAttribute = Integer.parseInt( tempLine.split(",\\s*")[1] );
                        thirdAttribute = tempLine.split(",\\s*")[2];
                        fourthAttribute = tempLine.split(",\\s*")[3];
                        fifthAttribute = Integer.parseInt( tempLine.split(",\\s*")[4] );
                        sixthAttribute = Integer.parseInt( tempLine.split(",\\s*")[5] );
                        seventhAttribute = Integer.parseInt( (tempLine.split(",\\s*")[6]) );
                        
                        // Add the data to the prepared statement
                        sqlStatementSingle.setString(1,firstAttribute);
                        sqlStatementSingle.setInt(2,secondAttribute);
                        sqlStatementSingle.setString(3,thirdAttribute);
                        sqlStatementSingle.setString(4,fourthAttribute);
                        sqlStatementSingle.setInt(5,fifthAttribute);
                        sqlStatementSingle.setInt(6,sixthAttribute);
                        sqlStatementSingle.setInt(7,seventhAttribute);
                        
                        // Insert the data into the table.
                        sqlStatementSingle.executeUpdate(); 
                        
                    } // end while.
                    
                    // Calculate the time it took to insert the data.
                    long finish = System.currentTimeMillis();
                    long timeToExecute = finish - start;
                    
                    // Print the time it took to execute the query.
                    jTextArea1.append( "SUCCESS!! The time it took to insert the data was: " + timeToExecute + " milliseconds (or equally; " + ((float)timeToExecute /1000) + " seconds, " + ((float)timeToExecute /60000) + " minutes).\n");
    
                } // end if.  
                
                // Now check if the file inserted is Games type.
                else if ( tableToBeInserted.equals( " Games " ) ) {
                    
                    // Read-in the file. 
                    BufferedReader br = new BufferedReader(new FileReader(fileToBeInserted));
                    
                    // Set up temporary variables needed.
                    String tempLine = "";
                    String tempDate = "";
                    int tempYear = -1;
                    int tempMonth = -1;
                    int tempDay = -1;
                    
                    int firstAttribute = -1;
                    java.sql.Date secondAttribute = null;
                    String thirdAttribute = "";
                    String fourthAttribute = "";
                    int fifthAttribute = -1;
                    int sixthAttribute = -1;
                    
                    // Start the timer.
                    long start = System.currentTimeMillis(); 
                    
                    // Read in each line and add it to the databse one at a time. Do this until the end of the file.
                    while ( (tempLine = br.readLine()) != null ) {
                        
                        firstAttribute = Integer.parseInt(tempLine.split(",\\s*")[0]);
                        tempDate = tempLine.split(",\\s*")[1];     
                        tempYear = Integer.parseInt( tempDate.split("-")[0] );
                        tempMonth = Integer.parseInt( tempDate.split("-")[1] );
                        tempDay = Integer.parseInt( tempDate.split("-")[2] );          
                        secondAttribute = new java.sql.Date( tempYear - 1900, tempMonth -1 , tempDay +1 );
                        
                        thirdAttribute = tempLine.split(",\\s*")[2];
                        fourthAttribute = tempLine.split(",\\s*")[3];
                        fifthAttribute = Integer.parseInt( tempLine.split(",\\s*")[4] );
                        sixthAttribute = Integer.parseInt( (tempLine.split(",\\s*")[5]) );
                        
                        // Add the data to the prepared statement
                        sqlStatementSingle.setInt(1,firstAttribute);
                        sqlStatementSingle.setDate(2,secondAttribute);
                        sqlStatementSingle.setString(3,thirdAttribute);
                        sqlStatementSingle.setString(4,fourthAttribute);
                        sqlStatementSingle.setInt(5,fifthAttribute);
                        sqlStatementSingle.setInt(6,sixthAttribute);
                        
                        // Insert the data into the table.
                        sqlStatementSingle.executeUpdate( ); 
                        
                    } // end while.
                    
                    // Calculate the time it took to insert the data.
                    long finish = System.currentTimeMillis();
                    long timeToExecute = finish - start;

                    // Print the time it took to execute the query.
                    jTextArea1.append( "SUCCESS!! The time it took to insert the data was: " + timeToExecute + " milliseconds (or equally; " + ((float)timeToExecute /1000) + " seconds, " + ((float)timeToExecute /60000) + " minutes).\n");
                      
                } // end else if.
                
                // Now check if the file inserted is Play type.
                else if ( tableToBeInserted.equals(" Play ") ) {
                    
                    // Read-in the file. 
                    BufferedReader br = new BufferedReader(new FileReader(fileToBeInserted));
                    
                    // Set up temporary variables needed.
                    String tempLine = "";
                    int firstAttribute = -1;
                    int secondAttribute = -1;
                    
                    // Start the timer.
                    long start = System.currentTimeMillis(); 
                    
                    // Read in each line and add it to the databse one at a time. Do this until the end of the file.
                    while ( (tempLine = br.readLine()) != null ) {
                        
                        firstAttribute = Integer.parseInt(tempLine.split(",\\s*")[0]);
                        secondAttribute = Integer.parseInt( tempLine.split(",\\s*")[1]);
                       
                        // Add the data to the prepared statement.
                        sqlStatementSingle.setInt(1,firstAttribute);
                        sqlStatementSingle.setInt(2,secondAttribute);
                        
                        // Insert the data into the table.
                        sqlStatementSingle.executeUpdate( ); 
                        
                    } // end while.
                    
                    // Calculate the time it took to insert the data.
                    long finish = System.currentTimeMillis();
                    long timeToExecute = finish - start;
                    
                    // Print the time it took to execute the query.
                    jTextArea1.append( "SUCCESS!! The time it took to insert the data was: " + timeToExecute + " milliseconds (or equally; " + ((float)timeToExecute /1000) + " seconds, " + ((float)timeToExecute /60000) + " minutes).\n");
                    
                } // end else if.
               
            } // end try.
            
            catch (Exception e ) {
                
                // If the batch insertion failed, display an error message to the user. 
                errorMessage = errorMessage + e.getMessage();
                jTextArea1.append(errorMessage + "\n");
                jTextArea1.append("Please go back and recheck your inputted File!\n");
                errorMessage = "Whoops. Error Type: ";
                
            } // end catch.
          
        } // end if.
       
    }//GEN-LAST:event_jButton3ActionPerformed

    // jButton3 corresponds to the "Go Back" button.
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        // If this button is pressed, hide the current JFrame in
        // order to display the InsertData frame.
        
        // Before returning, close the connection and statement objects.

        if (sqlStatementSingle != null){
            try {
                sqlStatementSingle.close();
            } catch (SQLException ex) {
                Logger.getLogger(MySqlConnectDelete.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println( "Error while closing prepared statement.");
            } // end catch.
        } // end if.
        
        if (sqlConnection != null){
            try {
                sqlConnection.close();
            } catch (SQLException ex) {
                Logger.getLogger(MySqlConnectDelete.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println( "Error while closing connection.");
            } // end catch.
        } // end if.

        setVisible(false);
        tempInsertDataJFrame.setVisible( true );

    }//GEN-LAST:event_jButton4ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

} // end class.
